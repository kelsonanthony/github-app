'use strict'

import React, { Component } from 'react'
import ajax from '@fdaciuk/ajax'
import AppContent from './components/app-content'

class App extends Component {
    constructor () {
        super()
        this.state = {
            userinfo: null,
            repos: [],
            starred: [],
            isFetching: false
            //searchFieldDisabled: false
        }
        
        this.handleSearch = this.handleSearch.bind(this)
    }

    getGitHubApiUrl (username, type) {
        const internalUser = username ? `/${username}` : ''
        const internalType = type ? `/${type}` : ''
        return `https://api.github.com/users${internalUser}${internalType}`
    }

    handleSearch (e) {
        const value = e.target.value
        const keyCode = e.which || e.keyCode
        const ENTER = 13
        //const target = e.target

        //e.persist(0) //habilita e desabilita
        //console.log(e.target)
        //console.dir(e.target)

        if (keyCode === ENTER) {
            this.setState({ isFetching: true })
            //e.target.disabled = true
            //target.disabled = true
            //console.log('evento: ', e)
            ajax().get(this.getGitHubApiUrl(value))
            .then((result) => {
                    this.setState({
                        userinfo: {
                            username: result.name,
                            photo: result.avatar_url,
                            login: result.login,
                            repos: result.public_repos,
                            followers: result.followers,
                            following: result.following
                        },
                        repos: [],
                        starred: []
                    })
                    //console.log(result)
                })
                .always(() => this.setState({ isFetching: false }))
                // .always(() => {
                //     console.log('evento: ', e)
                //     //e.target.disabled = false
                //     target.disabled = false

                // })
                
        }
    }

    getRepos (type) {
        
        return (e) => {
            const username = this.state.userinfo.login
            ajax().get(this.getGitHubApiUrl(username, type)).then((result) => {
                this.setState({
                    [type]: result.map((repo) => ({
                        name: repo.name,
                        link: repo.html_url
                        
                    }))
                })
            })
        }
    }

    render () {
        return <AppContent 
            userinfo={this.state.userinfo}
            repos={this.state.repos}
            starred={this.state.starred}
            isFetching={this.state.isFetching}
            //handleSearch = {(e) => this.handleSearch(e)}
            handleSearch={this.handleSearch}
            //getRepos={() => console.log('get repos app')}
            getRepos={this.getRepos('repos')}
            //getStarred={() => console.log('get starred app')}
            getStarred={this.getRepos('starred')}
            
        />
    }
}

export default App